// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: proto/capper/querier.proto

package capper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuerierClient is the client API for Querier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuerierClient interface {
	CaptureQuery(ctx context.Context, in *CaptureQueryRequest, opts ...grpc.CallOption) (Querier_CaptureQueryClient, error)
}

type querierClient struct {
	cc grpc.ClientConnInterface
}

func NewQuerierClient(cc grpc.ClientConnInterface) QuerierClient {
	return &querierClient{cc}
}

func (c *querierClient) CaptureQuery(ctx context.Context, in *CaptureQueryRequest, opts ...grpc.CallOption) (Querier_CaptureQueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &Querier_ServiceDesc.Streams[0], "/capper.Querier/CaptureQuery", opts...)
	if err != nil {
		return nil, err
	}
	x := &querierCaptureQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Querier_CaptureQueryClient interface {
	Recv() (*CaptureResponse, error)
	grpc.ClientStream
}

type querierCaptureQueryClient struct {
	grpc.ClientStream
}

func (x *querierCaptureQueryClient) Recv() (*CaptureResponse, error) {
	m := new(CaptureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QuerierServer is the server API for Querier service.
// All implementations must embed UnimplementedQuerierServer
// for forward compatibility
type QuerierServer interface {
	CaptureQuery(*CaptureQueryRequest, Querier_CaptureQueryServer) error
	mustEmbedUnimplementedQuerierServer()
}

// UnimplementedQuerierServer must be embedded to have forward compatible implementations.
type UnimplementedQuerierServer struct {
}

func (UnimplementedQuerierServer) CaptureQuery(*CaptureQueryRequest, Querier_CaptureQueryServer) error {
	return status.Errorf(codes.Unimplemented, "method CaptureQuery not implemented")
}
func (UnimplementedQuerierServer) mustEmbedUnimplementedQuerierServer() {}

// UnsafeQuerierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuerierServer will
// result in compilation errors.
type UnsafeQuerierServer interface {
	mustEmbedUnimplementedQuerierServer()
}

func RegisterQuerierServer(s grpc.ServiceRegistrar, srv QuerierServer) {
	s.RegisterService(&Querier_ServiceDesc, srv)
}

func _Querier_CaptureQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CaptureQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuerierServer).CaptureQuery(m, &querierCaptureQueryServer{stream})
}

type Querier_CaptureQueryServer interface {
	Send(*CaptureResponse) error
	grpc.ServerStream
}

type querierCaptureQueryServer struct {
	grpc.ServerStream
}

func (x *querierCaptureQueryServer) Send(m *CaptureResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Querier_ServiceDesc is the grpc.ServiceDesc for Querier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Querier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "capper.Querier",
	HandlerType: (*QuerierServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CaptureQuery",
			Handler:       _Querier_CaptureQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/capper/querier.proto",
}
