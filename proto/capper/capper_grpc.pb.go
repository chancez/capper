// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: proto/capper/capper.proto

package capper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CapperClient is the client API for Capper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CapperClient interface {
	Capture(ctx context.Context, in *CaptureRequest, opts ...grpc.CallOption) (Capper_CaptureClient, error)
	NodeMetadata(ctx context.Context, in *NodeMetadataRequest, opts ...grpc.CallOption) (Capper_NodeMetadataClient, error)
}

type capperClient struct {
	cc grpc.ClientConnInterface
}

func NewCapperClient(cc grpc.ClientConnInterface) CapperClient {
	return &capperClient{cc}
}

func (c *capperClient) Capture(ctx context.Context, in *CaptureRequest, opts ...grpc.CallOption) (Capper_CaptureClient, error) {
	stream, err := c.cc.NewStream(ctx, &Capper_ServiceDesc.Streams[0], "/capper.Capper/Capture", opts...)
	if err != nil {
		return nil, err
	}
	x := &capperCaptureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Capper_CaptureClient interface {
	Recv() (*CaptureResponse, error)
	grpc.ClientStream
}

type capperCaptureClient struct {
	grpc.ClientStream
}

func (x *capperCaptureClient) Recv() (*CaptureResponse, error) {
	m := new(CaptureResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *capperClient) NodeMetadata(ctx context.Context, in *NodeMetadataRequest, opts ...grpc.CallOption) (Capper_NodeMetadataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Capper_ServiceDesc.Streams[1], "/capper.Capper/NodeMetadata", opts...)
	if err != nil {
		return nil, err
	}
	x := &capperNodeMetadataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Capper_NodeMetadataClient interface {
	Recv() (*NodeMetadataResponse, error)
	grpc.ClientStream
}

type capperNodeMetadataClient struct {
	grpc.ClientStream
}

func (x *capperNodeMetadataClient) Recv() (*NodeMetadataResponse, error) {
	m := new(NodeMetadataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CapperServer is the server API for Capper service.
// All implementations must embed UnimplementedCapperServer
// for forward compatibility
type CapperServer interface {
	Capture(*CaptureRequest, Capper_CaptureServer) error
	NodeMetadata(*NodeMetadataRequest, Capper_NodeMetadataServer) error
	mustEmbedUnimplementedCapperServer()
}

// UnimplementedCapperServer must be embedded to have forward compatible implementations.
type UnimplementedCapperServer struct {
}

func (UnimplementedCapperServer) Capture(*CaptureRequest, Capper_CaptureServer) error {
	return status.Errorf(codes.Unimplemented, "method Capture not implemented")
}
func (UnimplementedCapperServer) NodeMetadata(*NodeMetadataRequest, Capper_NodeMetadataServer) error {
	return status.Errorf(codes.Unimplemented, "method NodeMetadata not implemented")
}
func (UnimplementedCapperServer) mustEmbedUnimplementedCapperServer() {}

// UnsafeCapperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CapperServer will
// result in compilation errors.
type UnsafeCapperServer interface {
	mustEmbedUnimplementedCapperServer()
}

func RegisterCapperServer(s grpc.ServiceRegistrar, srv CapperServer) {
	s.RegisterService(&Capper_ServiceDesc, srv)
}

func _Capper_Capture_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CaptureRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CapperServer).Capture(m, &capperCaptureServer{stream})
}

type Capper_CaptureServer interface {
	Send(*CaptureResponse) error
	grpc.ServerStream
}

type capperCaptureServer struct {
	grpc.ServerStream
}

func (x *capperCaptureServer) Send(m *CaptureResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Capper_NodeMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodeMetadataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CapperServer).NodeMetadata(m, &capperNodeMetadataServer{stream})
}

type Capper_NodeMetadataServer interface {
	Send(*NodeMetadataResponse) error
	grpc.ServerStream
}

type capperNodeMetadataServer struct {
	grpc.ServerStream
}

func (x *capperNodeMetadataServer) Send(m *NodeMetadataResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Capper_ServiceDesc is the grpc.ServiceDesc for Capper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Capper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "capper.Capper",
	HandlerType: (*CapperServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Capture",
			Handler:       _Capper_Capture_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NodeMetadata",
			Handler:       _Capper_NodeMetadata_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/capper/capper.proto",
}
