syntax = "proto3";

package capper;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/chancez/capper/proto/capper";

service Capper {
  rpc Capture(CaptureRequest) returns (stream CaptureResponse) {}
  rpc NodeMetadata(NodeMetadataRequest) returns (stream NodeMetadataResponse) {}
}

message CaptureRequest {
  string filter = 1;
  uint64 num_packets = 2;
  google.protobuf.Duration duration = 3;
  repeated string interface = 4;
  int64 snaplen = 5;
  Pod k8s_pod_filter = 7;
  bool no_promiscuous_mode = 8;
  int64 buffer_size = 9;
  PcapOutputFormat output_format = 10;
}

message CaptureResponse {
  Packet packet = 1;
}

message Packet {
  bytes data = 1;
  PacketMetadata metadata = 2;
}


message PacketMetadata {
  CaptureInfo capture_info = 1;
  bool truncated = 2;
}

message AncillaryPacketData {
  int64 link_type = 1;
  string netns = 2;
  string iface_name = 3;
}

message CaptureInfo {
  google.protobuf.Timestamp timestamp = 1;
  int64 capture_length = 2;
  int64 length = 3;
  int64 interface_index = 4;
  AncillaryPacketData ancillary_data = 5;
}

// TODO: What to do with this?
message CaptureInterface {
  string name = 1;
  uint64 index = 2;
  string hostname = 3;
}

enum PcapOutputFormat {
  OUTPUT_FORMAT_UNSPECIFIED = 0;
  OUTPUT_FORMAT_PCAP = 1;
  OUTPUT_FORMAT_PCAPNG = 2;
}

message NodeMetadataRequest {
}

message NodeMetadataResponse {
  NodeMetadataUpdate updates = 1;
}

message NodeMetadataUpdate {
  string node_name = 1;
  PodMetadataUpdate pod_updates = 2;
}

message PodMetadataUpdate {
  repeated Pod added_pods = 1;
  repeated Pod removed_pods = 2;
}

message Pod {
  string namespace = 1;
  string name = 2;
}
