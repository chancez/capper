apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: capper-server
  labels:
    app: capper
    component: server
spec:
  selector:
    matchLabels:
      app: capper
      component: server
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container:  capper
      labels:
        app: capper
        component: server
    spec:
      priorityClassName: system-node-critical
      dnsPolicy: ClusterFirstWithHostNet
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      # Needed to capture packets of other pods, the host, etc.
      hostNetwork: true
      # Needed so we can access /proc/$PID/ns/net
      hostPID: true
      containers:
      - name: capper
        image: quay.io/capper/capper:main
        imagePullPolicy: Always
        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
        args:
          - server
          - --listen-address
          - 0.0.0.0:48999
          - --node-name
          - $(NODE_NAME)
          - --serf-listen-address
          - 0.0.0.0:7946
          - --serf-peers
          - capper-peers.default.svc.cluster.local:7946
          - --enable-containerd
          - 'true'
        securityContext:
          privileged: true
        ports:
          - name: grpc
            containerPort: 48999
            protocol: TCP
          - name: serf
            containerPort: 7946
            protocol: TCP
        volumeMounts:
          - name: containerd
            mountPath: /run/containerd
          - name: var-run
            mountPath: /var/run
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        readinessProbe:
          grpc:
            port: 48999
      terminationGracePeriodSeconds: 30
      volumes:
        - name: containerd
          hostPath:
            path: /run/containerd/
        # /var/run/netns/...
        - name: var-run
          hostPath:
            path: /var/run
